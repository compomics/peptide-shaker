package eu.isas.peptideshaker.gui.filtering;

import com.compomics.util.preferences.IdentificationParameters;
import eu.isas.peptideshaker.filtering.MatchFilter;
import eu.isas.peptideshaker.filtering.ProteinFilter;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;

/**
 * Dialog to edit identification matches filters.
 *
 * @author Marc Vaudel
 */
public class FilterDialog extends javax.swing.JDialog {

    /**
     * Boolean indicating whether the user canceled the filtering.
     */
    private boolean canceled = false;
    /**
     * The original filter.
     */
    private MatchFilter matchFilter;

    /**
     * Creates and displays a new dialog.
     *
     * @param parent the parent frame
     * @param filter the filter to edit
     */
    public FilterDialog(java.awt.Frame parent, MatchFilter filter) {
        super(parent, true);
        initComponents();
        this.matchFilter = filter.clone();
        setUpGUI(filter);
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * Sets up the GUI components.
     *
     * @param filter the filter to use to populate the GUI
     */
    public void setUpGUI(MatchFilter filter) {

        nameTxt.setText(filter.getName());
        descriptionTxt.setText(filter.getDescription());

        String text = "";
        for (String key : filter.getManualValidation()) {
            if (!text.equals("")) {
                text += "; ";
            }
            text += key;
        }
        manualValidationTxt.setText(text);
        
        text = "";
        for (String accession : filter.getExceptions()) {
            if (!text.equals("")) {
                text += "; ";
            }
            text += accession;
        }
        exceptionsTxt.setText(text);
        
        DefaultTableModel tableModel = new FilterItemsTableModel();
        filterItemsTable.setModel(tableModel);
        filterItemsTable.getColumn(" ").setMaxWidth(50);
        filterItemsTable.getColumn("  ").setMaxWidth(200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterPanel = new javax.swing.JPanel();
        filterSplitPane = new javax.swing.JSplitPane();
        propertiesPanel = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        descriptionLbl = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTxt = new javax.swing.JTextArea();
        filterSettingsPanel = new javax.swing.JPanel();
        manualSelectionSplitPane = new javax.swing.JSplitPane();
        manualValidationPanel = new javax.swing.JPanel();
        manualValidationScrollPane = new javax.swing.JScrollPane();
        manualValidationTxt = new javax.swing.JTextArea();
        exceptionsPanel = new javax.swing.JPanel();
        exceptionsScrollPane = new javax.swing.JScrollPane();
        exceptionsTxt = new javax.swing.JTextArea();
        filterItemsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        filterItemsTable = new javax.swing.JTable();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PSM Filters");

        filterPanel.setBackground(new java.awt.Color(230, 230, 230));

        filterSplitPane.setBorder(null);
        filterSplitPane.setDividerLocation(200);
        filterSplitPane.setDividerSize(0);
        filterSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        filterSplitPane.setOpaque(false);

        propertiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter Properties"));
        propertiesPanel.setOpaque(false);

        nameLbl.setText("Name");

        descriptionLbl.setText("Description");

        descriptionTxt.setColumns(20);
        descriptionTxt.setRows(5);
        descriptionScrollPane.setViewportView(descriptionTxt);

        javax.swing.GroupLayout propertiesPanelLayout = new javax.swing.GroupLayout(propertiesPanel);
        propertiesPanel.setLayout(propertiesPanelLayout);
        propertiesPanelLayout.setHorizontalGroup(
            propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionScrollPane)
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(propertiesPanelLayout.createSequentialGroup()
                                .addComponent(nameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(descriptionLbl))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        propertiesPanelLayout.setVerticalGroup(
            propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl)
                    .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        filterSplitPane.setLeftComponent(propertiesPanel);

        filterSettingsPanel.setOpaque(false);

        manualSelectionSplitPane.setBorder(null);
        manualSelectionSplitPane.setDividerLocation(425);
        manualSelectionSplitPane.setDividerSize(0);
        manualSelectionSplitPane.setOpaque(false);

        manualValidationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Manual Validation"));
        manualValidationPanel.setOpaque(false);

        manualValidationScrollPane.setOpaque(false);

        manualValidationTxt.setColumns(20);
        manualValidationTxt.setRows(1);
        manualValidationScrollPane.setViewportView(manualValidationTxt);

        javax.swing.GroupLayout manualValidationPanelLayout = new javax.swing.GroupLayout(manualValidationPanel);
        manualValidationPanel.setLayout(manualValidationPanelLayout);
        manualValidationPanelLayout.setHorizontalGroup(
            manualValidationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualValidationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manualValidationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );
        manualValidationPanelLayout.setVerticalGroup(
            manualValidationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualValidationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manualValidationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        manualSelectionSplitPane.setLeftComponent(manualValidationPanel);

        exceptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Exceptions"));
        exceptionsPanel.setOpaque(false);

        exceptionsScrollPane.setOpaque(false);

        exceptionsTxt.setColumns(20);
        exceptionsTxt.setRows(1);
        exceptionsScrollPane.setViewportView(exceptionsTxt);

        javax.swing.GroupLayout exceptionsPanelLayout = new javax.swing.GroupLayout(exceptionsPanel);
        exceptionsPanel.setLayout(exceptionsPanelLayout);
        exceptionsPanelLayout.setHorizontalGroup(
            exceptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exceptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exceptionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                .addContainerGap())
        );
        exceptionsPanelLayout.setVerticalGroup(
            exceptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exceptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exceptionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addContainerGap())
        );

        manualSelectionSplitPane.setRightComponent(exceptionsPanel);

        filterItemsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter Item"));
        filterItemsPanel.setOpaque(false);

        filterItemsTable.setModel(new FilterItemsTableModel());
        jScrollPane1.setViewportView(filterItemsTable);

        javax.swing.GroupLayout filterItemsPanelLayout = new javax.swing.GroupLayout(filterItemsPanel);
        filterItemsPanel.setLayout(filterItemsPanelLayout);
        filterItemsPanelLayout.setHorizontalGroup(
            filterItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterItemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        filterItemsPanelLayout.setVerticalGroup(
            filterItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterItemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout filterSettingsPanelLayout = new javax.swing.GroupLayout(filterSettingsPanel);
        filterSettingsPanel.setLayout(filterSettingsPanelLayout);
        filterSettingsPanelLayout.setHorizontalGroup(
            filterSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterItemsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(manualSelectionSplitPane)
        );
        filterSettingsPanelLayout.setVerticalGroup(
            filterSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterSettingsPanelLayout.createSequentialGroup()
                .addComponent(filterItemsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manualSelectionSplitPane))
        );

        filterSplitPane.setRightComponent(filterSettingsPanel);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(filterSplitPane))
                .addContainerGap())
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterSplitPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Set the filters and close the dialog.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (validateInput()) {
            setFilter();
            dispose();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Close the dialog without saving.
     *
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        canceled = true;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel descriptionLbl;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTxt;
    private javax.swing.JPanel exceptionsPanel;
    private javax.swing.JScrollPane exceptionsScrollPane;
    private javax.swing.JTextArea exceptionsTxt;
    private javax.swing.JPanel filterItemsPanel;
    private javax.swing.JTable filterItemsTable;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JPanel filterSettingsPanel;
    private javax.swing.JSplitPane filterSplitPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane manualSelectionSplitPane;
    private javax.swing.JPanel manualValidationPanel;
    private javax.swing.JScrollPane manualValidationScrollPane;
    private javax.swing.JTextArea manualValidationTxt;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel propertiesPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Indicates whether the editing was canceled by the user.
     *
     * @return a boolean indicating whether the editing was canceled by the user
     */
    public boolean isCanceled() {
        return canceled;
    }

    /**
     * Returns the filter as set by the user.
     *
     * @return the filter
     */
    public MatchFilter getFilter() {
        return matchFilter;
    }

    /**
     * /**
     * Modifies the filter according to the user selection.
     */
    public void setFilter() {

        matchFilter.setName(nameTxt.getText());
        matchFilter.setDescription(descriptionTxt.getText());

        matchFilter.setManualValidation(parseAccessions(manualValidationTxt.getText()));
        matchFilter.setExceptions(parseAccessions(exceptionsTxt.getText()));

    }

    /**
     * Validates the input.
     *
     * @return a boolean indicating whether the input is valid
     */
    public boolean validateInput() {

        return true;
    }

    /**
     * Convenience method parsing keys in the manual validation/exception text
     * fields.
     *
     * @param text the text in the text field
     * @return a list of the parsed keys
     */
    private ArrayList<String> parseAccessions(String text) {
        ArrayList<String> result = new ArrayList<String>();
        String[] split = text.split(";"); //todo allow other separators
        for (String part : split) {
            if (!part.trim().equals("")) {
                result.add(part.trim());
            }
        }
        return result;
    }

    /**
     * Indicates whether something was input for the filter.
     *
     * @return a boolean indicating whether something was input for the filter
     */
    public boolean hasInput() {
        return false;
    }

    /**
     * Table model for the filter items.
     */
    private class FilterItemsTableModel extends DefaultTableModel {

        /**
         * The names of the items to display
         */
        private ArrayList<String> ItemsNames = null;

        public FilterItemsTableModel() {
            if (matchFilter != null) {
                ItemsNames = new ArrayList<String>(matchFilter.getItemsNames());
                Collections.sort(ItemsNames);
            }
        }

        @Override
        public int getRowCount() {
            if (ItemsNames == null) {
                return 0;
            }
            return ItemsNames.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return " ";
                case 1:
                    return "Name";
                case 2:
                    return "  ";
                case 4:
                    return "Value";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            switch (column) {
                case 0:
                    return row + 1;
                case 1:
                    String itemName = ItemsNames.get(row);
                    return itemName;
                case 2:
                    itemName = ItemsNames.get(row);
                    return matchFilter.getComparatorForItem(itemName).name;
                case 3:
                    itemName = ItemsNames.get(row);
                    return matchFilter.getValue(itemName).toString();
                default:
                    return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }
}
